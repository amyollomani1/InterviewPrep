Objects
    int is class for integers
    float is class for floating point values
    str is class for character strings

Reserved words
    False, as, continue, else, from, 
    in not return yield 
    None assert def except global is or 
    try True break del finally if lambda pass 
    while and class elif for 
    import nonlocal raise with

Python is dynamically teyped language (unlike C++ or Java)
    and identifier can later be reassigned to another Object
    (an identifier is a name of the object)

    alias: a second identifier to existing object
        either name can affect object's state
        if one of the names is reassigned to a new value, it breaks the alias

Built in classes
    bool 
    intfloat
    list - not immutable
    tuple
    str
    set - not immutable
    frozenset
    dict - not immutable

    immutable: if each object of class has fixed value upon instantiation

    tuple is immutable version of list

    set rperesents mathematical notion of set : collection of elements with no duplicates or order
    
Built in functions
abs(x)
Return the absolute value of a number.
all(iterable)
Return True if bool(e) is True for each element e.
any(iterable)
Return True if bool(e) is True for at least one element e.
chr(integer)
Return a one-character string with the given Unicode code point.
divmod(x, y)
Return (x // y, x % y) as tuple, if x and y are integers.
hash(obj)
Return an integer hash value for the object (see Chapter 10).
id(obj)
Return the unique integer serving as an “identity” for the object.
input(prompt)
Return a string from standard input; the prompt is optional.
isinstance(obj, cls)
Determine if obj is an instance of the class (or a subclass).
iter(iterable)
Return a new iterator object for the parameter (see Section 1.8).
len(iterable)
Return the number of elements in the given iteration.
map(f, iter1, iter2, ...)
Return an iterator yielding the result of function calls f(e1, e2, ...) for respective elements e1 ∈ iter1, e2 ∈ iter2, ...
max(iterable)
Return the largest element of the given iteration.
max(a, b, c, ...)
Return the largest of the arguments.
min(iterable)
Return the smallest element of the given iteration.
min(a, b, c, ...)
Return the smallest of the arguments.
next(iterator)
Return the next element reported by the iterator (see Section 1.8).
open(filename, mode)
Open a file with the given name and access mode.
ord(char)
Return the Unicode code point of the given character.
pow(x, y)
Return the value xy (as an integer if x and y are integers); equivalent to x     y.
pow(x, y, z)
Return the value (xy mod z) as an integer.
print(obj1, obj2, ...)
Print the arguments, with separating spaces and trailing newline.
range(stop)
Construct an iteration of values 0, 1, . . . , stop − 1.
range(start, stop)
Construct an iteration of values start, start + 1, . . . , stop − 1.
range(start, stop, step)
Constructaniterationofvaluesstart,start+step,start+2 step,...
reversed(sequence)
Return an iteration of the sequence in reverse.
round(x)
Return the nearest int value (a tie is broken toward the even value).
round(x, k)
Return the value rounded to the nearest 10−k (return-type matches x).
sorted(iterable)
Return a list containing elements of the iterable in sorted order.
sum(iterable)
Return the sum of the elements in the iterable (must be numeric).
type(obj)
Return the class to which the instance obj belongs.


Files functions:
fp.read( )
Return the (remaining) contents of a readable file as a string.
fp.read(k)
Return the next k bytes of a readable file as a string.
fp.readline( )
Return (remainder of ) the current line of a readable file as a string.
fp.readlines( )
Return all (remaining) lines of a readable file as a list of strings.
for line in fp:
Iterate all (remaining) lines of a readable file.
fp.seek(k)
Change the current position to be at the kth byte of the file.
fp.tell( )
Return the current position, measured as byte-offset from the start.
fp.write(string)
Write given string at current position of the writable file.
fp.writelines(seq)
Write each of the strings of the given sequence at the current position of the writable file. This command does not insert any newlines, beyond those that are embedded in the strings.
print(..., file=fp)
Redirect output of print function to the file.


Input: 
year = int(input('Enter x and y sperated by spaces:' ))
pieces = reply.split() # returns list of strings seperated by spaces
x = foat(peices[0])

print('x is', x)

Files:
fp = open('sample.txt', 'w')
fp.write('Hello\n')

Exception classes:
Exception
A base class for most error types
AttributeError
Raised by syntax obj.foo, if obj has no member named foo
EOFError
Raised if “end of file” reached for console or file input
IOError
Raised upon failure of I/O operation (e.g., opening file)
IndexError
Raised if index to sequence is out of bounds
KeyError
Raised if nonexistent key requested for set or dictionary
KeyboardInterrupt
Raised if user types ctrl-C while program is executing
NameError
Raised if nonexistent identifier used
StopIteration
Raised by next(iterator) if no element; see Section 1.8
TypeError
Raised when wrong type of parameter is sent to a function
ValueError
Raised when parameter has invalid value (e.g., sqrt(−5))
ZeroDivisionError
Raised when any division operator used with 0 as divisor

abs('hello') will raise TypeError since parameter isn't numeric
sets and dictionaries raise KeyError when attempt is made toa ccess nonexistant element

ex of raising execpetions:
def sqrt(x):
    if not isinstance(x,(int, float)):
        raise TypeError('x must be numeric')
    elif x < 0:
        raise ValueError('x cannot be negative')

try:
    ratio = x/y
except ZeroDivisionError:
    ..do something else

Advantage to try-except structure: 
    having to safe guard against every possible exceptional case uses extra execution time
    
    instead use try-except 
       doesn't do extransuous checks for exception condition
       However, handling exceptional case requires slightly more time then standard conditional statment
       So only use if exception is relativly unlikely, or if its expenisce otherwise

try:
    fp = open( sample.txt )
except IOError as e:
    print( Unable to open the file: , e)

age = −1 # an initially invalid choice while age <= 0:
try:
    age = int(input( Enter your age in years:   )) 
    if age <= 0:
        print( Your age must be positive ) 
except (ValueError, EOFError):
    print( Invalid response ) (or you can use pass, which does nothing)

finally: (this clause with body of code will always be executed, even if theres exception. 
        usually use for cleanup like closing a file)


Interate
    for j in range(1000)
def factors(n): #returns all factors of n
    for k in range(1,n+1)
        if n % k == 0:
            yield k # yield this factor as next result ()
            yield n # can do both
            future = k + n # code keeps going


A generator: 
    similar to functions, but instead of return it uses a yield statment
     to inidcate each element of series
     can't use yeild and return in same implementation. use return for functions, not generators


Conditional expressions: (only use when it imporves readability)
Note: this is same as condtion ? expr1 : expre2 in Java or C++
    if n>= 0:
        param = n
    else:
        param = -n
    result = foo(param) #call function

    Equivalent is
    param = n if n>= 0 else -n
    result = foo(param)
    OR:
    result = foo(n if n>= 0 else -n)

Comprehension syntax
    expression for value in iterable if condition
    factors = []
    for k in range(1, n+1):
        if(n%k == 0):
            factors.append(k)
    
    OR:
    facors = [k for k in range(1,n+1) if n%k ==0]

[ k k for k in range(1, n+1) ] list
{ k k for k in range(1, n+1) } set
( k k for k in range(1, n+1) ) generator
{ k : k k for k in range(1, n+1) } dictionary

Packing and Unpacking sequences
unpacking:
a,b,c,d = range(7,11) #this does a = 7, b = 8, c = 9, d = 19
Right hand side is any iterable type. 
Nummber of variables on left hand must be same as right hand

packing:
data = 2,4,6,8 #data is assigned to tuple (2,4,6,8) #automatic packing of a tuple
return x,y #returns tuple x and y

quotient, remiander = divmod(a,b)
for x,y in [(7,2), (5,8), (6,4)]:
for k,v in mapping.items():

Simultansios assignments
x,y,z = 6,2,5 #x is packed into tuple, then automatically unpacked
j,k = k,j #swapping values of j and k
def fibonaccie():
    a,b = 0,1
    while True:
        yield a 
        a,b = b, a + b

Scopes and namespaces
name resolution: process of determining value associated with identifier
dir() reports names of identifires of givern namepsace (keys of dictionary)
vars() returns full dictionary
when identifier is indicated in command, python searches serires of namepsaces in the process of name resolution    
    first: most locally encolosing scope is earched for a given name
    if not found, then ext outer scope is searched....

Each object has its own namespace to store its attributes. 
Classes also have namespaces
Scope: each distinct scope is represented by abstraction called namespace

first class objects - instances of a type that can be assigned identifier, passed as parameter, or returned by function
                        functions and classes are also first-clasee
                        ex:
                        scream = print
                        scream('Hello') #this calls print to print hello

                        scream is an alias for print
        one function can be passed as parameter to another
        max(a,b,key =abs) # determines which val has larger absolute value
            key will be assigned to the actual parameter abs

        
Modulues: libraries which can be imported
import loads definitions from module to current namespace
from math import pi, sqrt
from math import * #imports all, dangerous as some defintions in mod may confit with the ones already in namespace (or in another library)
import math #import modulue itself, adds identifier math to current namespace (so do math.pi or math.sqrt(2))

Creating module: 
    utility.py
    from utility import count

if __name__ == __main__ : (explicitly executes main. need for when your importing stuff?)

comman modules:
Module Name
Description
array
Provides compact array storage for primitive types.
collections
Defines additional data structures and abstract base classes involving collections of objects.
copy
Defines general functions for making copies of objects.
heapq
Provides heap-based priority queue functions (see Section 9.3.7).
math
Defines common mathematical constants and functions.
os
Provides support for interactions with the operating system.
random
Provides random number generation.
re
Provides support for processing regular expressions.
sys
Provides additional level of interaction with the Python interpreter.
time
Provides support for measuring time, or delaying a program.

Random class functions:
eed(hashable)
Initializes the pseudo-random number generator based upon the hash value of the parameter
random( )
Returns a pseudo-random floating-point value in the interval [0.0, 1.0).
randint(a,b)
Returns a pseudo-random integer in the closed interval [a,b].
randrange(start, stop, step)
Returns a pseudo-random integer in the standard Python range indicated by the parameters.
choice(seq)
Returns an element of the given sequence chosen pseudo-randomly.
shuffle(seq)
Reorders the elements of the given sequence pseudo-randomly.


